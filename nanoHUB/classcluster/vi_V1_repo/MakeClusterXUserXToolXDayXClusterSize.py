from PIL import Image
from PIL import ImageDraw
import mysql.connector
import UserToolDayPattern
import csv
import sys


#This requires two input files
#The first is a cluster file.  This is a list of clusters, one per line, with their user members.
#the second file is a geolocation file that maps a user to a geolocation.  This file was generated by Nathan Denny.
#the next argument is the start date of the cluster yyyy-mm-dd
#the next argument is the end date of the cluster
#the next argument is the name of the data table into which to insert the clusterm
#The output of this program is a list of rows that contain:
#clustername, username, toolname, day, clusterSize, city, state, country
clusters = []

geocache = {}
userToGeo = {}

if len(sys.argv) >= 2:
	clusterReader = csv.reader(open(sys.argv[1]))
	for row in clusterReader:
		cluster = []
		clusters.append(cluster)
		for elem in row:
			cluster.append(elem)

if len(sys.argv) >= 3:
	geoReader = csv.reader(open(sys.argv[2]))
	for row in geoReader:
		user = row[0]
		location = row[1].strip() + "," + row[2].strip() + "," + row[3].strip()
		if location not in geocache:
			geocache[location] = []
		geocache[location].append(user)
		userToGeo[user] = (location, (row[1].strip(), row[2].strip(), row[3].strip()))
		


print("hello")
#sys.exit(1)

# conn = MySQLdb.connect(host = "localhost",
# 						user = "root",
# 						passwd = "",
# 						db = "narwhal_22022011")

conn = mysql.connector.connect(host="127.0.0.1",
								   user="shang26_ro",
								   passwd="PNY0fvkqHQfx49ry",
								   db="nanohub", port=3307)
utdpl = UserToolDayPattern.UserToolDayPatternList(sys.argv[3], sys.argv[4], 'N')

utdpl.grabAllFromDatabase(conn)

rows = utdpl.makeClusterUserToolDayClustersizeList(clusters, geocache, userToGeo)
userclustersizeset = set()

currentCluster = 'dummy'
clusterNameWriter = open(sys.argv[1].replace('.csv','_aubiceClusterNamesOnly.csv'), 'w')

with open(sys.argv[1].replace('.csv','_aubiceClusters.csv'), 'w') as clusterFile:
	clusterWriter = csv.writer(clusterFile)
	clusterWriter.writerow(['cluster','user','tool','day','clustersize','city','state','country'])
	for row in rows:
		clusterWriter.writerow(row)
		userclustersizeset.add((row[0].replace("'",''),row[1],row[4]))
		if row[0].replace("'",'') != currentCluster:
			clusterNameWriter.write(row[0].replace("'",'') + '\n')
			currentCluster = row[0].replace("'",'')

clusterWriter = open(sys.argv[1].replace('.csv','_aubiceClustersOnly.sql'), 'w')
for row in userclustersizeset:
	theLine = 'insert into ' + sys.argv[5] + " (cluster, username, clustersize) values ('" + row[0] + "','" + row[1] + "'," + str(row[2]) + ");\n"
	clusterWriter.write(theLine)

clusterWriter.close()
clusterNameWriter.close()
conn.close()
