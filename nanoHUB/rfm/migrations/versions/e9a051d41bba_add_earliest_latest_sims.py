"""add earliest latest sims

Revision ID: e9a051d41bba
Revises: 39120e4b932c
Create Date: 2021-08-04 14:58:10.030066

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import mysql

# revision identifiers, used by Alembic.
revision = 'e9a051d41bba'
down_revision = '39120e4b932c'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('ix_user_descriptors_average_freqency', table_name='user_descriptors')
    op.drop_index('ix_user_descriptors_lastvisitDate', table_name='user_descriptors')
    op.drop_index('ix_user_descriptors_registerDate', table_name='user_descriptors')
    op.drop_index('ix_user_descriptors_timestamp_last_updated', table_name='user_descriptors')
    op.drop_index('username', table_name='user_descriptors')
    op.drop_column('user_descriptors', 'tools_used_count')
    op.drop_column('user_descriptors', 'average_freqency')
    op.drop_column('user_descriptors', 'timestamp_created')
    op.drop_column('user_descriptors', 'simulation_lifetime_days')
    op.drop_column('user_descriptors', 'username')
    op.drop_column('user_descriptors', 'registerDate')
    op.drop_column('user_descriptors', 'timestamp_last_updated')
    op.drop_column('user_descriptors', 'tools_used_names')
    op.drop_column('user_descriptors', 'name')
    op.drop_column('user_descriptors', 'user_lifetime_days')
    op.drop_column('user_descriptors', 'lastvisitDate')
    op.drop_column('user_descriptors', 'simulations_run_count')
    op.drop_column('user_descriptors', 'email')
    op.drop_column('user_descriptors', 'days_spent_on_nanohub')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('user_descriptors', sa.Column('days_spent_on_nanohub', mysql.INTEGER(display_width=11), autoincrement=False, nullable=True, comment='total number of days spent on nanoHUB'))
    op.add_column('user_descriptors', sa.Column('email', mysql.VARCHAR(collation='utf8mb4_unicode_ci', length=150), nullable=True))
    op.add_column('user_descriptors', sa.Column('simulations_run_count', mysql.INTEGER(display_width=11), autoincrement=False, nullable=True))
    op.add_column('user_descriptors', sa.Column('lastvisitDate', mysql.DATETIME(), nullable=True))
    op.add_column('user_descriptors', sa.Column('user_lifetime_days', mysql.INTEGER(display_width=11), autoincrement=False, nullable=True, comment='last day - registration day'))
    op.add_column('user_descriptors', sa.Column('name', mysql.VARCHAR(collation='utf8mb4_unicode_ci', length=255), nullable=True))
    op.add_column('user_descriptors', sa.Column('tools_used_names', mysql.TEXT(collation='utf8mb4_unicode_ci'), nullable=True))
    op.add_column('user_descriptors', sa.Column('timestamp_last_updated', mysql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP'), nullable=False))
    op.add_column('user_descriptors', sa.Column('registerDate', mysql.DATETIME(), nullable=True))
    op.add_column('user_descriptors', sa.Column('username', mysql.VARCHAR(collation='utf8mb4_unicode_ci', length=150), nullable=True))
    op.add_column('user_descriptors', sa.Column('simulation_lifetime_days', mysql.INTEGER(display_width=11), autoincrement=False, nullable=True))
    op.add_column('user_descriptors', sa.Column('timestamp_created', mysql.DATETIME(), nullable=True))
    op.add_column('user_descriptors', sa.Column('average_freqency', mysql.DECIMAL(precision=10, scale=0), nullable=True, comment='F = lifetime in days / Days spent on nanoHUB'))
    op.add_column('user_descriptors', sa.Column('tools_used_count', mysql.INTEGER(display_width=11), autoincrement=False, nullable=True))
    op.create_index('username', 'user_descriptors', ['username'], unique=False)
    op.create_index('ix_user_descriptors_timestamp_last_updated', 'user_descriptors', ['timestamp_last_updated'], unique=False)
    op.create_index('ix_user_descriptors_registerDate', 'user_descriptors', ['registerDate'], unique=False)
    op.create_index('ix_user_descriptors_lastvisitDate', 'user_descriptors', ['lastvisitDate'], unique=False)
    op.create_index('ix_user_descriptors_average_freqency', 'user_descriptors', ['average_freqency'], unique=False)
    # ### end Alembic commands ###
